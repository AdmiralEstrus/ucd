db = exports.UCDsql:getConnection()
accountData = {}

addEventHandler("onResourceStart", resourceRoot,
	function ()
		db:query(cacheDatabase, {}, "SELECT * FROM `accountData`")
	end
)

function cacheDatabase(qh)
	local result = qh:poll(0)
	for _, row in pairs(result) do
		accountData[row.account] = {}
		for column, value in pairs(row) do
			if (column ~= "account" and column ~= "id") then
				accountData[row.account][column] = value
			end
		end
	end
	outputDebugString("Accounts successfully cached!")
end

-- The equivalent of setAccountData
function SAD(plr, column, value)
	if (not plr or not column or not value or not db) then return end
	if (type(plr) ~= "string") then 
		if (not isElement(plr) or plr.type ~= "player" or type(column) ~= "string" or type(value) == "table" or plr.account.guest) then return false end
		plr = plr.account.name
	end
	
	-- We need this to cache a new user's account if they registered after the db was cached
	if (not accountData[plr]) then
		accountData[plr] = {}
		cacheAccount(plr)
	end
	
	-- Update the table
	accountData[plr][column] = value
	
	-- Insert it into the database
	if (accountData[plr]) then
		-- nil translates into NULL for SQL, but we don't want to insert NULL values
		if (value ~= nil) then
			db:exec("UPDATE `accountData` SET `??`=? WHERE `account`=?", column, value, plr)
		end
	end
	
	return true
end

-- The equivalent of getAccountData
function GAD(plr, column)
	if (not plr or not column) then return end
	if (type(plr) ~= "string") then
		if (not isElement(plr) or plr.type ~= "player" or type(column) ~= "string" or plr.account.guest) then return false end
		plr = plr.account.name
	end
	
	-- If the specified account has no data or the column is not valid
	if (column == "*") then
		return accountData[plr]
	else
		if (accountData[plr] == nil or accountData[plr][column] == nil) then
			return nil
		end
	end

	return accountData[plr][column]
end

function isPlayerAccountCached(plr)
	if (not plr) then return end
	if (not isElement(plr) or plr.type ~= "player" or plr.account.guest) then return false end
	
	--local accountID = getPlayerAccountID(plr)
	
	if (not accountData[plr.account.name]) then
		return false
	end
	return true
end 

function cacheAccount(account)
	if (not account) then return end
	if (type(account) ~= "string") then return false end
	
	local result = db:query("SELECT * FROM `accountData` WHERE `account`=?", account):poll(-1)
	if (not result or #result ~= 1) then return false end
	
	for _, row in pairs(result) do
		accountData[row.account] = {}
		for column, value in pairs(row) do
			if (column ~= "account") then			
				accountData[row.account][column] = value
			end
		end
	end
	outputDebugString("Cached player's account with account "..account)
	return true
end

--[[
function getIDData(id, column)
	if (not id or not column) then return end
	if (type(column) ~= "string") then return false end
	
	id = tonumber(id)
	
	-- If the specified account has no data or the column is not valid
	if (column == "*") then
		return accountData[id]
	else
		if (accountData[id] == nil) or (accountData[id][column] == nil) then
			return nil
		end
	end

	return accountData[id][column]
end
--]]
