function onPlayerDamage(plr, loss)
	--outputDebugString("------------------")
	local remainder 
	local armour = plr.armor
	if (armour and armour > 0) then
		if (armour - loss < 0) then
			--outputDebugString("armor - loss < 0")
			remainder = math.abs(armour - loss) -- This is a negative value so we must make it positive
			--outputDebugString("Remainder = "..remainder)
			
			--outputDebugString("Armour before = "..plr.armor)
			plr.armor = plr.armor - plr.armor
			--outputDebugString("Armour after = "..plr.armor)
			
			--outputDebugString("Health before = "..plr.health)
			plr.health = plr.health - remainder
			--outputDebugString("Health after = "..plr.health)
		else
			--outputDebugString("Armour before = "..plr.armor)
			plr.armor = plr.armor - loss
			--outputDebugString("Armour after = "..plr.armor)
		end
		return
	end
--	outputDebugString("Health before = "..plr.health)
	plr.health = plr.health - loss
--	outputDebugString("Health after = "..plr.health)
end
addEvent("UCDdamage.onPlayerDamage", true)
addEventHandler("UCDdamage.onPlayerDamage", root, onPlayerDamage)
